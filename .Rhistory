moas  <- names(rheum)[substr(names(rheum), 1, 4) == "moa_"]
trials <- names(rheum)[substr(names(rheum), 1, 6) == "trial_"]
drugs <- names(rheum)[substr(names(rheum), 1, 5) == "drug_"]
# Choose fewer options to reduce number need to run
paths <- paths[c(1,5)]    # Reduce number of scenarios by sampling only one level of variation at highest level
moas <- moas[c(1,3,5)]
trials <- trials[c(1,3,5)]
drugs <- drugs[c(1,3,5)]
# Create matrix of combinations
count <- 0
res <- matrix(nrow = nrow(rheum), ncol = length(paths) *length(moas) * length(trials) * length(drugs))
res_names <- vector(length = length(paths) *length(moas) * length(trials) * length(drugs))
for (h in paths){
for(i in moas){
for(j in trials){
for(k in drugs){
count <- count + 1
res[, count] <-
rheum[ , h] +
rheum[ , i] +
rheum[ , j] +
rheum[ , k]
res_names[count] <- paste(h, i, j, k, sep = "_")
}
}
}
}
colnames(res) <- res_names
rownames(res) <- paste(rheum$brd_drug_pth, rheum$moa, rheum$drug, rheum$nct_id, rheum$iteration,
sep = "_")
#Como_prevs
como_prev <- c("hi")
#como_prev <- c("std")
#como_prev <- c("lo")
comorbidity_prev <- ifelse(como_prev == "hi", 0.4, NA) #depression/anxiety
comorbidity_prev <- ifelse(como_prev == "std", 0.2, comorbidity_prev)
comorbidity_prev <- ifelse(como_prev == "lo", 0.1, comorbidity_prev) #copd/repiratory conditions
# Add in se term for interaction
load("data/outcome_smrs_for_simulation.Rdata")
print(c(das_smrs_sd, ibdq_smrs_sd))
# Values of 0.14 and 0.17 from 'standardized' versions of DAS & IBDQ
# If correct, I can't see value of distinguishing - will set to 0.2 here
# but could presumably use 1 as diabetes (not sure how HB1c was scaled) - check
# this with DM
sd <- 1       ### This should come from real studies and depend on indication (i.e., on outcome IBDQ, DAS)
# calculate SE for comorbidity adn non-comorbidity group (same for placebo and treatment)
rheum_final <- rheum_final[with(rheum_final, order(atc_5, drug, nct_id)),]
# Calculate standard error for groups with and without comorbidity
ncomo_se = sd/ ((1-comorbidity_prev) * rheum_final$n_per_grp)^0.5
ycomo_se = sd/ (   comorbidity_prev  * rheum_final$n_per_grp)^0.5
# Calculate SE for interaction, same for all
# We multiple by two because the standard error is the same in the treatment and placebo arms
inter_prec <- 1/(2*ncomo_se^2 + 2*ycomo_se^2)
## Write model
myform_nested2 <- y ~ -1 + wdg +    ## wdg = wider (/widest) drug grouping (top of hierarchy)
f(trial, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 1)))) +
f(mydrug, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 1)))) +
f(mymoa, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 1)))) +
f(mypath, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 1))))
## Make part of model matrix which is identical for all iterations
my_drug_n <- as.numeric(as.factor(rheum_final$drug))
study_id_n <- as.numeric(as.factor(as.character(rheum_final$nct_id)))
moa_n <- as.numeric(as.factor(as.character(rheum_final$moa)))
path_n <- as.numeric(as.factor(as.character(rheum_final$brd_drug_pth)))
## Create dataset which is consistent for all iterations
my_data <- data.frame(y_prec = inter_prec,
trial = study_id_n,
wdg = 1,            ## wdg = wider (/widest) drug grouping (top of hierarchy)
mymoa = moa_n,
mydrug = my_drug_n,
mypath = path_n)
## Select only rheum variables need for each analysis
rheum <- rheum [ , c("brd_drug_pth", "moa", "drug", "nct_id", "iteration")]
save(my_data, myform_nested2, rheum, res, file = paste0("data/sim2/",como_prev,"/for_inla.Rdata"))
### Create scripts to run on HPCC
count <- 0
for(scenario in res_names) {
count <- count + 1
con <- file(description =  paste0("unix_scripts/sim2/",como_prev,"/",count,"_",como_prev,"_",scenario, ".sh"), open = "wb")
top <- c("#!/bin/bash",
"#PBS -l nodes=1:ppn=1:centos6",
"#PBS -l cput=2:00:00") #,
#    "#PBS -l walltime=6:00:00") ## setting walltime at >4hrs is necessary for low prevalence runs, but should be avoided for others as it bumps up into the long queue
act <- paste("/usr/bin/Rscript", paste0("simuln/sim2/",como_prev,"/2_02b_run_inla_models.R"),
## act <- paste("/usr/bin/Rscript simuln/2_02c_run_inla_class_level.R",
count,  como_prev ,scenario,
##      "> /export/home/dma24j/run.output", sep = " ")
"&>> simuln/output_sim2.txt", sep = " ")
readr::write_lines(c(top, act), con)
close(con)
}
# Metascript to run scripts
# CAn run up to 50 at a time on short list
# all take about 30 mins
a <- as.character(c(seq(1,length(res_names),1)))
res_names2 <- paste(a,como_prev,res_names, sep="_")
con <- file(description =  paste0("unix_scripts/sim2/",como_prev,"/metascript.sh"), open = "wb")
metascript <- paste0("qsub simuln/sim2/",como_prev,"/", res_names2, ".sh")
readr::write_lines(metascript, con)
close(con)
# 02_create_interaction_datasets.R
library(INLA)
## Read in inflamm/GI trials
load("Data/rheum_final.Rdata")
# Create effect estimates interactions with variation at trial, drug and class level
# Read in dataset with different interactions
# Each variable is for a different component
rheum <- readRDS("scratch_data/sim2_interactn_opts.Rds")
rheum <- as.data.frame(rheum)
# extract vectors describing trial, drug and atc5 level interactions
paths  <- names(rheum)[substr(names(rheum), 1, 5) == "path_"]
moas  <- names(rheum)[substr(names(rheum), 1, 4) == "moa_"]
trials <- names(rheum)[substr(names(rheum), 1, 6) == "trial_"]
drugs <- names(rheum)[substr(names(rheum), 1, 5) == "drug_"]
# Choose fewer options to reduce number need to run
paths <- paths[c(1,5)]    # Reduce number of scenarios by sampling only one level of variation at highest level
moas <- moas[c(1,3,5)]
trials <- trials[c(1,3,5)]
drugs <- drugs[c(1,3,5)]
# Create matrix of combinations
count <- 0
res <- matrix(nrow = nrow(rheum), ncol = length(paths) *length(moas) * length(trials) * length(drugs))
res_names <- vector(length = length(paths) *length(moas) * length(trials) * length(drugs))
for (h in paths){
for(i in moas){
for(j in trials){
for(k in drugs){
count <- count + 1
res[, count] <-
rheum[ , h] +
rheum[ , i] +
rheum[ , j] +
rheum[ , k]
res_names[count] <- paste(h, i, j, k, sep = "_")
}
}
}
}
colnames(res) <- res_names
rownames(res) <- paste(rheum$brd_drug_pth, rheum$moa, rheum$drug, rheum$nct_id, rheum$iteration,
sep = "_")
#Como_prevs
como_prev <- c("hi")
#como_prev <- c("std")
#como_prev <- c("lo")
comorbidity_prev <- ifelse(como_prev == "hi", 0.4, NA) #depression/anxiety
comorbidity_prev <- ifelse(como_prev == "std", 0.2, comorbidity_prev)
comorbidity_prev <- ifelse(como_prev == "lo", 0.1, comorbidity_prev) #copd/repiratory conditions
# Add in se term for interaction
load("data/outcome_smrs_for_simulation.Rdata")
print(c(das_smrs_sd, ibdq_smrs_sd))
# Values of 0.14 and 0.17 from 'standardized' versions of DAS & IBDQ
# If correct, I can't see value of distinguishing - will set to 0.2 here
# but could presumably use 1 as diabetes (not sure how HB1c was scaled) - check
# this with DM
sd <- 1       ### This should come from real studies and depend on indication (i.e., on outcome IBDQ, DAS)
# calculate SE for comorbidity adn non-comorbidity group (same for placebo and treatment)
rheum_final <- rheum_final[with(rheum_final, order(atc_5, drug, nct_id)),]
# Calculate standard error for groups with and without comorbidity
ncomo_se = sd/ ((1-comorbidity_prev) * rheum_final$n_per_grp)^0.5
ycomo_se = sd/ (   comorbidity_prev  * rheum_final$n_per_grp)^0.5
# Calculate SE for interaction, same for all
# We multiple by two because the standard error is the same in the treatment and placebo arms
inter_prec <- 1/(2*ncomo_se^2 + 2*ycomo_se^2)
## Write model
myform_nested2 <- y ~ -1 + wdg +    ## wdg = wider (/widest) drug grouping (top of hierarchy)
f(trial, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 1)))) +
f(mydrug, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 1)))) +
f(mymoa, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 1)))) +
f(mypath, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 1))))
## Make part of model matrix which is identical for all iterations
my_drug_n <- as.numeric(as.factor(rheum_final$drug))
study_id_n <- as.numeric(as.factor(as.character(rheum_final$nct_id)))
moa_n <- as.numeric(as.factor(as.character(rheum_final$moa)))
path_n <- as.numeric(as.factor(as.character(rheum_final$brd_drug_pth)))
## Create dataset which is consistent for all iterations
my_data <- data.frame(y_prec = inter_prec,
trial = study_id_n,
wdg = 1,            ## wdg = wider (/widest) drug grouping (top of hierarchy)
mymoa = moa_n,
mydrug = my_drug_n,
mypath = path_n)
## Select only rheum variables need for each analysis
rheum <- rheum [ , c("brd_drug_pth", "moa", "drug", "nct_id", "iteration")]
save(my_data, myform_nested2, rheum, res, file = paste0("data/sim2/",como_prev,"/for_inla.Rdata"))
### Create scripts to run on HPCC
count <- 0
for(scenario in res_names) {
count <- count + 1
con <- file(description =  paste0("unix_scripts/sim2/",como_prev,"/",count,"_",como_prev,"_",scenario, ".sh"), open = "wb")
top <- c("#!/bin/bash",
"#PBS -l nodes=1:ppn=1:centos6",
"#PBS -l cput=2:00:00") #,
#    "#PBS -l walltime=6:00:00") ## setting walltime at >4hrs is necessary for low prevalence runs, but should be avoided for others as it bumps up into the long queue
act <- paste("/usr/bin/Rscript", paste0("simuln/sim2/",como_prev,"/2_02b_run_inla_models.R"),
## act <- paste("/usr/bin/Rscript simuln/2_02c_run_inla_class_level.R",
count,  como_prev ,scenario,
##      "> /export/home/dma24j/run.output", sep = " ")
"&>>", paste0("simuln/sim2/",como_prev,"output.txt"), sep = " ")
readr::write_lines(c(top, act), con)
close(con)
}
# Metascript to run scripts
# CAn run up to 50 at a time on short list
# all take about 30 mins
a <- as.character(c(seq(1,length(res_names),1)))
res_names2 <- paste(a,como_prev,res_names, sep="_")
con <- file(description =  paste0("unix_scripts/sim2/",como_prev,"/metascript.sh"), open = "wb")
metascript <- paste0("qsub simuln/sim2/",como_prev,"/", res_names2, ".sh")
readr::write_lines(metascript, con)
close(con)
# 02_create_interaction_datasets.R
library(INLA)
## Read in inflamm/GI trials
load("Data/rheum_final.Rdata")
# Create effect estimates interactions with variation at trial, drug and class level
# Read in dataset with different interactions
# Each variable is for a different component
rheum <- readRDS("scratch_data/sim2_interactn_opts.Rds")
rheum <- as.data.frame(rheum)
# extract vectors describing trial, drug and atc5 level interactions
paths  <- names(rheum)[substr(names(rheum), 1, 5) == "path_"]
moas  <- names(rheum)[substr(names(rheum), 1, 4) == "moa_"]
trials <- names(rheum)[substr(names(rheum), 1, 6) == "trial_"]
drugs <- names(rheum)[substr(names(rheum), 1, 5) == "drug_"]
# Choose fewer options to reduce number need to run
paths <- paths[c(1,5)]    # Reduce number of scenarios by sampling only one level of variation at highest level
moas <- moas[c(1,3,5)]
trials <- trials[c(1,3,5)]
drugs <- drugs[c(1,3,5)]
# Create matrix of combinations
count <- 0
res <- matrix(nrow = nrow(rheum), ncol = length(paths) *length(moas) * length(trials) * length(drugs))
res_names <- vector(length = length(paths) *length(moas) * length(trials) * length(drugs))
for (h in paths){
for(i in moas){
for(j in trials){
for(k in drugs){
count <- count + 1
res[, count] <-
rheum[ , h] +
rheum[ , i] +
rheum[ , j] +
rheum[ , k]
res_names[count] <- paste(h, i, j, k, sep = "_")
}
}
}
}
colnames(res) <- res_names
rownames(res) <- paste(rheum$brd_drug_pth, rheum$moa, rheum$drug, rheum$nct_id, rheum$iteration,
sep = "_")
#Como_prevs
como_prev <- c("hi")
#como_prev <- c("std")
#como_prev <- c("lo")
comorbidity_prev <- ifelse(como_prev == "hi", 0.4, NA) #depression/anxiety
comorbidity_prev <- ifelse(como_prev == "std", 0.2, comorbidity_prev)
comorbidity_prev <- ifelse(como_prev == "lo", 0.1, comorbidity_prev) #copd/repiratory conditions
# Add in se term for interaction
load("data/outcome_smrs_for_simulation.Rdata")
print(c(das_smrs_sd, ibdq_smrs_sd))
# Values of 0.14 and 0.17 from 'standardized' versions of DAS & IBDQ
# If correct, I can't see value of distinguishing - will set to 0.2 here
# but could presumably use 1 as diabetes (not sure how HB1c was scaled) - check
# this with DM
sd <- 1       ### This should come from real studies and depend on indication (i.e., on outcome IBDQ, DAS)
# calculate SE for comorbidity adn non-comorbidity group (same for placebo and treatment)
rheum_final <- rheum_final[with(rheum_final, order(atc_5, drug, nct_id)),]
# Calculate standard error for groups with and without comorbidity
ncomo_se = sd/ ((1-comorbidity_prev) * rheum_final$n_per_grp)^0.5
ycomo_se = sd/ (   comorbidity_prev  * rheum_final$n_per_grp)^0.5
# Calculate SE for interaction, same for all
# We multiple by two because the standard error is the same in the treatment and placebo arms
inter_prec <- 1/(2*ncomo_se^2 + 2*ycomo_se^2)
## Write model
myform_nested2 <- y ~ -1 + wdg +    ## wdg = wider (/widest) drug grouping (top of hierarchy)
f(trial, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 1)))) +
f(mydrug, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 1)))) +
f(mymoa, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 1)))) +
f(mypath, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 1))))
## Make part of model matrix which is identical for all iterations
my_drug_n <- as.numeric(as.factor(rheum_final$drug))
study_id_n <- as.numeric(as.factor(as.character(rheum_final$nct_id)))
moa_n <- as.numeric(as.factor(as.character(rheum_final$moa)))
path_n <- as.numeric(as.factor(as.character(rheum_final$brd_drug_pth)))
## Create dataset which is consistent for all iterations
my_data <- data.frame(y_prec = inter_prec,
trial = study_id_n,
wdg = 1,            ## wdg = wider (/widest) drug grouping (top of hierarchy)
mymoa = moa_n,
mydrug = my_drug_n,
mypath = path_n)
## Select only rheum variables need for each analysis
rheum <- rheum [ , c("brd_drug_pth", "moa", "drug", "nct_id", "iteration")]
save(my_data, myform_nested2, rheum, res, file = paste0("data/sim2/",como_prev,"/for_inla.Rdata"))
### Create scripts to run on HPCC
count <- 0
for(scenario in res_names) {
count <- count + 1
con <- file(description =  paste0("unix_scripts/sim2/",como_prev,"/",count,"_",como_prev,"_",scenario, ".sh"), open = "wb")
top <- c("#!/bin/bash",
"#PBS -l nodes=1:ppn=1:centos6",
"#PBS -l cput=2:00:00") #,
#    "#PBS -l walltime=6:00:00") ## setting walltime at >4hrs is necessary for low prevalence runs, but should be avoided for others as it bumps up into the long queue
act <- paste("/usr/bin/Rscript", paste0("simuln/sim2/",como_prev,"/2_02b_run_inla_models.R"),
## act <- paste("/usr/bin/Rscript simuln/2_02c_run_inla_class_level.R",
count,  como_prev ,scenario,
##      "> /export/home/dma24j/run.output", sep = " ")
"&>>", paste0("simuln/sim2/",como_prev,"/output.txt"), sep = " ")
readr::write_lines(c(top, act), con)
close(con)
}
# Metascript to run scripts
# CAn run up to 50 at a time on short list
# all take about 30 mins
a <- as.character(c(seq(1,length(res_names),1)))
res_names2 <- paste(a,como_prev,res_names, sep="_")
con <- file(description =  paste0("unix_scripts/sim2/",como_prev,"/metascript.sh"), open = "wb")
metascript <- paste0("qsub simuln/sim2/",como_prev,"/", res_names2, ".sh")
readr::write_lines(metascript, con)
close(con)
library(INLA)
## Read in inflamm/GI trials
load("Data/rheum_final.Rdata")
# Create effect estimates interactions with variation at trial, drug and class level
# Read in dataset with different interactions
# Each variable is for a different component
rheum <- readRDS("scratch_data/sim2_interactn_opts.Rds")
rheum <- as.data.frame(rheum)
## Select only one MoA - Interleukin-17A Antagonists & Receptor Interactions
ilk17a <- rheum %>%
filter(atc_5 == "A10BK")
library(tidyverse)
## Select only one MoA - Interleukin-17A Antagonists & Receptor Interactions
ilk17a <- rheum %>%
filter(atc_5 == "A10BK")
# Each variable is for a different component
rheum <- readRDS("scratch_data/sim2_interactn_opts.Rds")
rheum <- as.data.frame(rheum)
## Select only one MoA - Interleukin-17A Antagonists & Receptor Interactions
ilk17a <- rheum %>%
filter(atc_5 == "A10BK")
## Select only one MoA - Interleukin-17A Antagonists & Receptor Interactions
ilk17a <- rheum %>%
filter(moa == "Interleukin-17A Antagonists & Receptor Interactions")
names(ilk17a)
substr(names(ilk17a), 1, 6)
library(INLA)
## Read in diabetes trials
load("Data/metadata_for_simulation.Rdata")
# Create effect estimates interactions with variation at trial, drug and class level
# Read in dataset with different interactions
# Each variable is for a different component
diabetes <- readRDS("scratch_data/interactn_opts.Rds")
diabetes <- as.data.frame(diabetes)
## Select only one class SLGT2-inhibitors A10BK
sglt <- diabetes %>%
filter(atc_5 == "A10BK")
names(sglt)[substr(names(sglt), 1, 6) == "trial_"]
substr(names(sglt), 1, 6)
# extract vectors describing trial and drug level interactions only
trials <- names(ilk17a)[substr(names(ilk17a), 1, 6) == "trial_"]
drugs <- names(ilk17a)[substr(names(ilk17a), 1, 5) == "drug_"]
trials <- trials[c(1,3,5)]
drugs <- drugs[c(1,3,5)]
count <- 0
res <- matrix(nrow = nrow(ilk17a),
ncol = length(trials) * length(drugs))
res_names <- vector(length =  length(trials) * length(drugs))
for(j in trials){
for(k in drugs){
count <- count + 1
res[, count] <-
ilk17a[ , j] +
ilk17a[ , k]
res_names[count] <- paste(j, k, sep = "_")
}
}
colnames(res) <- res_names
rownames(res) <- paste(ilk17a$drug, ilk17a$nct_id, ilk17a$iteration,
sep = "_")
#Como_prevs
como_prev <- c("std")
comorbidity_prev <- ifelse(como_prev == "hi", 0.5, NA) #cardiovascular disease
comorbidity_prev <- ifelse(como_prev == "std", 0.2, comorbidity_prev)
comorbidity_prev <- ifelse(como_prev == "lo", 0.1, comorbidity_prev) #copd/repiratory condition
sd <- 1
# Select only one MOA
ilk17a_final <-
subset(rheum_final, moa == "Interleukin-17A Antagonists & Receptor Interactions")
ilk17a_final <- ilk17a_final[with(ilk17a_final, order(drug, nct_id)),]
# Calculate standard error for groups with and without comorbidity
ncomo_se = sd/ ((1-comorbidity_prev) * ilk17a_final$n_per_grp)^0.5
ycomo_se = sd/ (   comorbidity_prev  * ilk17a_final$n_per_grp)^0.5
# Calculate SE for interaction, same for all
# We multiple by two because the standard error is the same in the treatment and placebo arms
inter_prec <- 1/(2*ncomo_se^2 + 2*ycomo_se^2)
## Write model
myform_nested2 <- y ~ -1 + myatc4 +
f(trial, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 0.1)))) +
f(mydrug, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 0.1)))) #+
## Write model
myform_nested2 <- y ~ -1 + wdg +    ## wdg = wider (/widest) drug grouping (top of hierarchy)
f(trial, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 0.1)))) +
f(mydrug, model = "iid",
hyper = list(prec = list(prior = "logtnormal", param = c(mean = 0, prec = 0.1)))) #+
## Make part of model matrix which is identical for all iterations
my_drug_n <- as.numeric(as.factor(ilk17a_final$drug))
study_id_n <- as.numeric(as.factor(as.character(ilk17a_final$nct_id)))
## Create dataset which is consistent for all iterations
my_data <- data.frame(y_prec = inter_prec,
trial = study_id_n,
wdg = 1,
mydrug = my_drug_n)
## Select only diabetes variables need for each analysis
ilk17a <- ilk17a [ , c("drug", "nct_id", "iteration")]
save(my_data, myform_nested2, ilk17a, res, file = paste0("data/sim2/",como_prev,"/one_class_for_inla.Rdata"))
### Create scripts to run on HPCC
count <- 0
for(scenario in res_names) {
count <- count + 1
con <- file(description =  paste0("unix_scripts/sim2/",como_prev,"/oneclass_",count,"_",como_prev,"_",scenario, ".sh"), open = "wb")
top <- c("#!/bin/bash",
"#PBS -l nodes=1:ppn=1:centos6",
"#PBS -l cput=2:00:00",
"#PBS -l walltime=4:00:00") ## setting walltime at >4hrs is necessary for low prevalence runs, but should be avoided for others as it bumps up into the long queue
act <- paste("/usr/bin/Rscript", paste0("simuln/sim2/",como_prev,"/02b_run_inla_models_one_class.R"),
## act <- paste("/usr/bin/Rscript simuln/2_02c_run_inla_class_level.R",
count,  como_prev ,scenario,
##      "> /export/home/dma24j/run.output", sep = " ")
"&>>", paste0("simuln/sim2/",como_prev,"/output_one_class.txt"), sep = " ")
readr::write_lines(c(top, act), con)
close(con)
}
# Metascript to run scripts
# CAn run up to 50 at a time on short list
# all take about 30 mins
a <- as.character(c(seq(1,length(res_names),1)))
res_names2 <- paste(a,como_prev,res_names, sep="_")
con <- file(description =  paste0("unix_scripts/sim2/",como_prev,"/oneclass_metascript.sh"), open = "wb")
metascript <- paste0("qsub simuln/sim2/",como_prev,"/oneclass_", res_names2, ".sh")
readr::write_lines(metascript, con)
close(con)
#02b_run_inla_model
library(INLA)
#Como_prevs
#como_prev <- c("hi")
como_prev <- c("std")
#como_prev <- c("lo")
load(file = paste0("data/sim2/",como_prev,"/one_class_for_inla.Rdata"))
############ From now on putty, pass with args
## Loop through 6 scenarios, this will take approximately 3 hours
argsd <- commandArgs(trailingOnly=TRUE)
print(argsd)
choose_scenario <- ifelse(with_args, argsd[3] , "trial_0.25_drug_0.25")
print(choose_scenario)
with_args <- F
choose_scenario <- ifelse(with_args, argsd[3] , "trial_0.25_drug_0.25")
print(choose_scenario)
# Add in wider drug group level effect to a chosen variation scenario
sglt$res <- res[, choose_scenario] + -0.1
with_args <- F
#Como_prevs
#como_prev <- c("hi")
como_prev <- c("std")
load(file = paste0("data/sim1/",como_prev,"/one_class_for_inla.Rdata"))
argsd <- commandArgs(trailingOnly=TRUE)
print(argsd)
choose_scenario <- ifelse(with_args, argsd[3] , "trial_0.25_drug_0.25")
print(choose_scenario)
# Add in wider drug group level effect to a chosen variation scenario
sglt$res <- res[, choose_scenario] + -0.1
# Loop through each iteration
scenario <- vector(length = 250, mode = "list")
for (iter in 1:5){
## Add values for specific iteration
my_data$y <-  sglt$res[sglt$iteration == iter]
## Run model, trial within drug within ATC5 class within ATC4 class
mod1_nested2 <- inla(myform_nested2,
data = my_data,
# Add linear combinations to estimate drug-class
# lincomb = dc_all,
# Likelihood distribution
family = "gaussian",
# Fix likelihood hyperpars as the data is fixed with known precision.
control.family = list(hyper = list(prec = list(fixed = TRUE, initial = 0))),
# Likelihood precisions
scale = my_data$y_prec,
# Prior distribution for "fixed" effects - really for mu_mu
control.fixed = list(mean = 0, prec = 0.25),
# Optionally compute DIC
verbose = FALSE)
# Storing iterations in a single list
scenario[[iter]] <- summary(mod1_nested2)
}
scenario
